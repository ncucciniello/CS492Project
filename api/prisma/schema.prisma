generator client {
  provider      = "prisma-client-js"
  binaryTargets = "native"
}

datasource DS {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Workout {
  id                Int               @id @default(autoincrement())
  relationshipId    Int?
  date              DateTime?
  numberOfExercises Int?
  UserRelationship  UserRelationship? @relation(fields: [relationshipId], references: [id])
  exercises         Exercise[]
}

model Exercise {
  id              Int          @id @default(autoincrement())
  workoutId       Int?
  trainerComments String?
  reps            Int?
  actualReps      Int?
  numberOfSets    Int?
  actualSets      Int?
  weight          Float?
  actualWeight    Float?
  traineeComments String?
  exerciseTypeId  Int
  workout         Workout?     @relation(fields: [workoutId], references: [id])
  ExerciseType    ExerciseType @relation(fields: [exerciseTypeId], references: [id])
}

model ExerciseType {
  id                  Int     @id @default(autoincrement())
  exerciseDescription String?
  exerciseName        String?

  Exercise Exercise[]
}

model AppUser {
  id                  Int                @id @default(autoincrement())
  userName            String?
  email               String?            @unique
  createdOn           DateTime?          @default(now())
  lastLogin           DateTime?
  type                String?
  trainerRelationship UserRelationship[] @relation("trainer")
  traineeRelationship UserRelationship[] @relation("trainee")
}

model UserRelationship {
  trainerName String?
  traineeName String?
  id          Int       @id @default(autoincrement())
  trainerId   Int?
  traineeId   Int?
  trainerUser AppUser?  @relation("trainer", fields: [trainerId], references: [id])
  traineeUser AppUser?  @relation("trainee", fields: [traineeId], references: [id])
  Workout     Workout[]
}
